Date: Mon, 24 May 2021 14:39:10 +0000 (UTC)
Message-ID: <506943088.43.1621867150295@bf091557f0da>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_42_2016189192.1621867150295"

------=_Part_42_2016189192.1621867150295
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Python Developer notes</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>Python Developer notes</h1>
    <div class=3D"Section1">
        <blockquote>
<p><time datetime=3D"2021-05-10" class=3D"date-past">10 May 2021</time> </p=
>
</blockquote>
<hr>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Create a dictionary in a list with specific key and value pair</p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">import it=
ertools as it
headers =3D [("AlbumId", "AlbumId"), ("ArtistId", "ArtistId"), ("Title", "T=
itle")]
table_headers =3D []

for i, j in headers:
    t =3D ("text", i, "value", j)
    table_headers.append(dict(it.zip_longest(*[iter(t)] * 2, fillvalue=3D""=
)))

print(table_headers)</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Create a dictionary from two lists using zip function</p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">list1 =3D=
 ['karl', 'lary', 'keera']
list2 =3D [28934, 28935, 28936]

dict0 =3D dict(zip(list1, list2))

print(dict0)</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Check if given number is prime</p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">def is_pr=
ime(n):
    if n &lt;=3D 1 or n % 1 &gt; 0:
        return n, print(n, "is not a prime number")
    for i in range(2, (n // 2) + 1):
        if n % i =3D=3D 0:
            return n, print(n, "is not a prime number")
    print('\x1b[6;30;42m' + f"{str(n)}" + '\x1b[0m' + " is prime number")</=
pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Find factorial of given number</p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">def facto=
rial(n):
    if n &gt;=3D 0:
        if n =3D=3D 0:
            return 1
        else:
            return n * factorial(n-1)</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Floating text message</p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">import sy=
s
import time
import datetime

msg1 =3D '\x1b[6;30;42m' + 'Success!' + '\x1b[0m'
msg2 =3D '\x1b[6;37;41m' + 'Warning!' + '\x1b[0m'
msg3 =3D '\x1b[6;30;43m' + 'Caution!' + '\x1b[0m'

def floating(text=3Dmsg2, step=3D175, of=3D5, c=3D" "):
    while True:
        for i in range(step):
            # print("\r{0}{1}".format(char*i, text), end=3D"")
            sys.stdout.write("\r{0}{1}".format(c*i, text))
            sys.stdout.flush()
            time.sleep(1 / 2**of)
        print()
        break

floating()
answer =3D input("All your files will be deleted [y/N]: ")
if answer =3D=3D "y":
    floating(text=3Dmsg1)
elif answer.isdigit():
    floating(text=3Dmsg3)
else:
    print("good bye!")
</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Highlight an element with selenium</p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">def highl=
ight(self, driver, element, effect_time, color, border):
    driver =3D element._parent

    def apply_style(s):
        driver.execute_script("arguments[0].setAttribute('style', arguments=
[1]);", element, s)

    original_style =3D element.get_attribute('style')
    apply_style("border: {0}px solid {1};".format(border, color))
    self.take_screenshot(driver)
    time.sleep(effect_time)
    apply_style(original_style)</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Take a screenshot of a web site</p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">def take_=
screenshot(self, driver):
    filename =3D datetime.datetime.now().strftime("%d.%B.%Y-%H%M%S")
    driver.save_screenshot(r"Screenshots\{}.png".format(filename))</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Fahrenheit to celsius and celsius to fahrenheit temperature converter</p=
>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">def to_fa=
hrenheit(c):
    return 9 / 5 * c + 32

def to_celsius(f):
    return (f - 32) * 5 / 9
 =20
celsius_temps =3D [25, 32, 40]
print(list(map(to_fahrenheit, celsius_temps)))</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Decode and encode given message</p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">def rotat=
e_chr(c):
    rot_by =3D 3
    c =3D c.lower()
    alphabet =3D "abcdefghijklmnopqrstuvwxyz"
    # Keep punctuation and whitespace
    if c not in alphabet:
        return c
    rotated_pos =3D ord(c) + rot_by
    # If the rotation is inside the alphabet
    if rotated_pos &lt;=3D ord(alphabet[-1]):
        return chr(rotated_pos)
    # If the rotation goes beyond the alphabet
    return chr(rotated_pos - len(alphabet))

def decode_chr(c):
    rot_by =3D 3
    c =3D c.lower()
    alphabet =3D "abcdefghijklmnopqrstuvwxyz"
    if c not in alphabet:
        return c
    rotated_pos =3D ord(c) - rot_by
    # If the rotation is inside the alphabet
    if rotated_pos &gt;=3D ord(alphabet[0]):
        return chr(rotated_pos)
    # If the rotation goes beyond the alphabet
    return chr(rotated_pos + len(alphabet))
   =20
print("".join(map(rotate_chr, "My secret message goes here.")))
print("".join(map(decode_chr, "pb vhfuhw phvvdjh jrhv khuh.")))
print("".join(map(decode_chr, "fxqhbg jxowhnlq ndbd")))</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Making list from a string and removing unwanted char </p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">def str_t=
o_list(text):
    unwanted_dict =3D {54: 32, 55: 32, 56: 32, 57: 32}
    return list(text.translate(unwanted_dict).replace(" ", ""))

def str_to_list_with_none(text):
    unwanted_dict =3D {54: None, 55: None, 56: None, 57: None}
    return list(text.replace(" ", "").translate(unwanted_dict))</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Put underscore for long number</p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">"""
print(a[0:f] + "_" + a[f:f+3] + "_" + a[f+3:f+6] + "_" + a[f+6:f+9] + "_" +=
 a[f+9:f+12])
"""

def factorial(n):
    if n &gt;=3D 0:
        if n =3D=3D 0:
            return 1
        else:
            return n * factorial(n-1)

def under_scorer(char=3D"_", step=3D3):
    return char.join(a[i:i + step] for i in range(len(a) % 3, len(a), step)=
)

for j in range(33):
    a =3D str(factorial(j))
    if len(a) % 3 =3D=3D 0:
        print(j, "=3D&gt;", under_scorer())
    else:
        if len(a) &gt; 3:
            res =3D a[0:len(a) % 3] + "_" + under_scorer()
            print(j, "=3D&gt;", res)</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>The multiplication table</p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">for i i=
n range(1, 11):
    for j in range(1, 11):
        print('|{0:2d} * {1:2d} =3D {2:3d}'.format(j, i, j*i), end=3D" |")
    print("")</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Making three dots moving effect continuously</p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">import sy=
s
import time

def three_dots():
    print("Calling", end=3D"")
    loading =3D True
    loading_speed =3D 1
    loading_string =3D "." * 3
    while loading:
        for index, char in enumerate(loading_string):
            sys.stdout.write(char)  # write the next char to STDOUT
            sys.stdout.flush()  # flush the output
            time.sleep(1.0 / loading_speed)  # wait to match our speed
            index +=3D 1  # lists are zero indexed, we need to increase by =
one for the accurate count
        sys.stdout.write("\b" * index + " " * index + "\b" * index)
        sys.stdout.flush()  # flush the output

three_dots()</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Class definition and example </p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">from typi=
ng import Optional

class Position:
    MIN_LATITUDE =3D -90
    MAX_LATITUDE =3D 90
    MIN_LONGITUDE =3D -180
    MAX_LONGITUDE =3D 180

    def __init__(self, longitude: float, latitude: float, address: Optional=
[str] =3D None):
        self.longitude =3D longitude
        self.latitude =3D latitude
        self.address =3D address

    @property
    def latitude(self) -&gt; float:
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float) -&gt; None:
        if not (Position.MIN_LATITUDE &lt;=3D latitude &lt;=3D Position.MAX=
_LATITUDE):
            raise ValueError(f"latitude was {latitude}, but has to be in [-=
90,90]")
        self._latitude =3D latitude

    @property
    def longitude(self) -&gt; float:
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float) -&gt; None:
        if not (Position.MIN_LONGITUDE &lt;=3D longitude &lt;=3D Position.M=
AX_LONGITUDE):
            raise ValueError(f"longitude was {longitude}, but has to be in =
[-180,180]")
        self._longitude =3D longitude


pos1 =3D Position(49.0127913, 8.4231381, "Elm Street")
pos2 =3D Position(42.1238762, 9.1649964)</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Fibonacci example</p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">import sy=
s

table =3D [0]*1000

def fast_fib(n):
    if n &lt;=3D 1:
        return n
    else:
        if table[n-1] =3D=3D 0:
            table[n-1] =3D fast_fib(n-1)
        if table[n-2] =3D=3D 0:
            table[n-2] =3D fast_fib(n-2)
        table[n] =3D table[n-1] + table[n-2]
        return table[n]

def main():
    print('Enter a number : ')
    num =3D int(sys.stdin.readline())
    print(fast_fib(num))


if __name__ =3D=3D '__main__':
    main()</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Datetime example with object creation with regex control</p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">import da=
tetime
import re

class Human(object):
    def __init__(self, initial, second, last, birthday, country):
        self.initial =3D initial
        self.second =3D second
        self.last =3D last
        self.birthday =3D birthday
        self.country =3D country
        self.age =3D 0

    def __str__(self):
        full_name =3D self.initial + " " + self.second + " " + self.last
        print(f"Hello {full_name}!, You are {int(self.age)} years old. You =
are from {self.country}")

    def age_calculator(self, year):
        now =3D datetime.datetime.now()
        birth_day =3D datetime.datetime(int(year[0]), int(year[1]), int(yea=
r[2]), 0, 0, 0)
        delta_in_milliseconds =3D (now - birth_day).total_seconds()

        age =3D ((((delta_in_milliseconds / 60) / 60) / 24) / 365)
        days =3D (((delta_in_milliseconds / 60) / 60) / 24)
        hours =3D ((delta_in_milliseconds / 60) / 60)
        seconds =3D (delta_in_milliseconds / 60)
        print(int(age), "years")
        print(int(days), "days")
        print(int(hours), "hours")
        print(int(seconds), "seconds")
        print(int(delta_in_milliseconds), "milliseconds")
        self.age =3D age

    def regex_control(self, birthday):
        while True:
            result =3D re.search("^([1-9]|0[1-9]|1[0-9]|2[0-9]|3[0-1])(\.|-=
|/)"
                      "([1-9]|0[1-9]|1[0-2])(\.|-|/)([0-9][0-9]|19[0-9][0-9=
]|20[0-9][0-9])"
                      "$|^([0-9][0-9]|19[0-9][0-9]|20[0-9][0-9])(\.|-|/)([1=
-9]|0[1-9]|1[0-2])(\.|-|/)"
                      "([1-9]|0[1-9]|1[0-9]|2[0-9]|3[0-1])$", birthday)
            if result.string:
                c =3D ["/", "-", "."]
                char =3D [char for pos, char in enumerate(result.string) if=
 char in c]
                return self.age_calculator(result.string.split(char[0]))

if __name__ =3D=3D '__main__':
    h1 =3D Human("Ali", "Veli", "Deli", "1980/1/1", "Turkey")
    h1.regex_control(h1.birthday)
    h1.__str__()</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Check if file exists </p>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: py; gutter: false; theme: Confluence" data-theme=3D"Confluence">from os i=
mport path

def check_for_file():
    print("File exists: ", path.exists("source.txt"))

if __name__ =3D=3D "__main__":
    check_for_file()
</pre>=20
</div>
</div>
<p></p>
    </div>
</body>
</html>
------=_Part_42_2016189192.1621867150295--
